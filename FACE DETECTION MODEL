import cv2

# Load pre-trained face detection model (Haar cascades or SSD)
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Function to process each frame from the camera
def process_frame(frame):
    # Convert frame to grayscale (for Haar cascades)
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    
    # Detect faces using the face cascade
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
    
    # Draw rectangles around detected faces
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
        
        # Optionally, perform face recognition here (using embeddings)
        # Recognize the identity of the face
        
        # Example: Displaying recognized names
        # cv2.putText(frame, "Person Name", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (36,255,12), 2)
    
    # Display the frame
    cv2.imshow('Face Detection and Recognition', frame)

# Main function to capture video from the camera
def main():
    cap = cv2.VideoCapture(0)  # Open the default camera (index 0)
    
    while True:
        ret, frame = cap.read()
        
        if not ret:
            print("Failed to capture frame from camera. Exiting...")
            break
        
        process_frame(frame)
        
        # Check for 'q' key to exit
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    
    # Release the camera and close all OpenCV windows
    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
